buildscript {
  repositories {
    maven { url = 'https://maven.minecraftforge.net' }
    mavenCentral()
  }
}

plugins {
  id 'idea'
  id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '3.0'
  id "com.modrinth.minotaur" version "2.+"
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

archivesBaseName = "${mod_id}-forge-${minecraft_version}"

minecraft {
  mappings channel: 'official', version: minecraft_version

  runs {
    client {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Client'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modClientRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      taskName 'Server'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modServerRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      ideaModule "${rootProject.name}.${project.name}.main"
      args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
      taskName 'Data'
      property 'mixin.env.remapRefMap', 'true'
      property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
      mods {
        modDataRun {
          source sourceSets.main
          source project(":Common").sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources.srcDir 'src/generated/resources'


// Curse Maven Plugin
repositories {
  maven {
    url "https://www.cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  }
  mavenLocal()
}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
  compileOnly project(":Common")

  // Extra libraries
  implementation 'com.moandjiezana.toml:toml4j:0.7.2'
  implementation 'com.github.zafarkhaja:java-semver:0.9.0'

  // Test Framework
  testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
  testImplementation 'org.junit.jupiter:junit-jupiter-params:5.8.1'
}

tasks.withType(JavaCompile).configureEach {
  source(project(":Common").sourceSets.main.allSource)
}

processResources {
  from project(":Common").sourceSets.main.resources
}

shadowJar {
  dependencies {
    include(dependency('com.moandjiezana.toml:toml4j:.*'))
    include(dependency('com.github.zafarkhaja:java-semver:.*'))
  }
  minimize()
}

reobf {
  shadowJar {}
}

jar {
  manifest {
    attributes([
        "FMLModType"              : "LIBRARY",
        "Specification-Title"     : "${project.mod_name}",
        "Specification-Vendor"    : "${project.vendor_name}",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : "${project.version}",
        "Implementation-Vendor"   : "${project.mod_id}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
}

jar.finalizedBy('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId project.archivesBaseName
      version project.version
      artifact jar
    }
  }
}

curseforge {
  apiKey = "${credentials.forKey('curseforge_api_token')}"
  project {
    id = "${curseforge_project_id}"
    changelog = file("../CHANGELOG.md")
    changelogType = 'markdown'
    releaseType = "${project.curseforge_release_type}"
    addGameVersion("${minecraft_version}")
    addGameVersion("Forge")
    mainArtifact shadowJar
  }
  options {
    forgeGradleIntegration = true
  }
}

modrinth {
  token = "${credentials.forKey('modrinth_api_token')}"
  projectId = "${modrinth_project_id}"
  versionNumber = "${version}"
  versionType = "${modrinth_release_type}"
  uploadFile = shadowJar
  gameVersions = ["${minecraft_version}"]
  loaders = ["forge"]
}
