/*
 * Copyright 2022 Markus Bordihn
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

package de.markusbordihn.modsoptimizer.config;

import com.moandjiezana.toml.Toml;
import com.moandjiezana.toml.TomlWriter;
import de.markusbordihn.modsoptimizer.Constants;
import de.markusbordihn.modsoptimizer.data.ModFileData.ModEnvironment;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

public class ModsDatabaseConfig {

  public static final Path CONFIG_PATH =
      Paths.get("").toAbsolutePath().resolve("config").resolve(Constants.MOD_ID);
  private static Map<String, String> modsMap = new HashMap<>();

  static {
    // Create config file if not exists.
    File configFile = getConfigFile();
    if (configFile == null || !configFile.exists()) {
      configFile = createConfigFile(configFile);
    }

    // Read config file.
    readConfigFile(configFile);
  }

  protected ModsDatabaseConfig() {}

  public static String getConfigFileName() {
    return "config.toml";
  }

  public static Map<String, String> getConfig() {
    return modsMap;
  }

  public static boolean containsMod(String modId) {
    return modsMap.containsKey(modId);
  }

  public static ModEnvironment getModEnvironment(String modId) {
    if (modsMap.containsKey(modId)) {
      String modType = modsMap.get(modId);
      if (modType.equals("client")) {
        return ModEnvironment.CLIENT;
      }
      if (modType.equals("server")) {
        return ModEnvironment.SERVER;
      }
    }
    return ModEnvironment.DEFAULT;
  }

  private static void readConfigFile(File file) {
    if (file == null) {
      file = getConfigFile();
    }
    if (file == null || !file.exists() || !file.canWrite() || !file.canRead()) {
      Constants.LOG.error("âš  Unable to load config file {}!", file);
      return;
    }

    Constants.LOG.info("Loading Mods Database Config File from {}", file);
    try {
      Map<String, Object> config = new Toml().read(file).toMap();
      if (config.containsKey("Mods")) {
        Map<String, String> mods = (Map<String, String>) config.get("Mods");
        for (Map.Entry<String, String> entry : mods.entrySet()) {
          String modId = entry.getKey();
          String modType = entry.getValue();
          modsMap.put(modId, modType);
        }
      }
    } catch (Exception exception) {
      Constants.LOG.error("There was an error, loading the config file {}:", file, exception);
    }
  }

  private static File createConfigFile(File file) {
    Constants.LOG.info("Creating Mods Database Config File under {}", file);

    // Add default header
    StringBuilder textContent = new StringBuilder();
    textContent
        .append("# This file was auto-generated by ")
        .append(Constants.MOD_NAME)
        .append("\n");
    textContent.append("#\n");
    textContent.append("# This file contains a list of known client and server side mods.\n");
    textContent.append("# Most of the mods in this list using the wrong signals and are not\n");
    textContent.append("# compatible with the dedicated server.\n");
    textContent.append(
        "# See: https://github.com/MarkusBordihn/BOs-Mods-Optimizer/wiki/Define-the-correct-environment-for-a-Mod\n");
    textContent.append("#\n");
    textContent.append("# Add additional mod ids and their correct environment, if needed.\n");
    textContent.append("#\n");
    textContent.append("# Last update: ").append(LocalDateTime.now()).append("\n");
    textContent.append("# Note: To automatic update this file, just delete the file.\n");
    textContent.append("\n");
    textContent.append("\n");
    textContent.append("[Mods]").append("\n");

    // Add known client side mods to list.
    Map<String, String> modIds = new HashMap<>();
    for (String modId : ClientModsDatabase.getClientSideModsList()) {
      modIds.put(modId, "client");
    }

    // Add known server side mods to list.
    for (String modId : ServerModsDatabase.getServerSideModsList()) {
      modIds.put(modId, "server");
    }

    // Add toml config.
    OutputStream outputStream = new ByteArrayOutputStream();
    TomlWriter tomlWriter = new TomlWriter.Builder().build();
    try {
      tomlWriter.write(modIds, outputStream);
      textContent.append(outputStream);
    } catch (Exception exception) {
      Constants.LOG.error("There was an error, creating the config file {}:", file, exception);
      return null;
    }

    // Write config file.
    try {
      Files.writeString(file.toPath(), textContent, StandardOpenOption.CREATE_NEW);
    } catch (Exception exception) {
      Constants.LOG.error("There was an error, creating the config file {}:", file, exception);
      return null;
    }

    return file;
  }

  public static File getConfigFile() {
    Path path = getConfigDirectory();
    if (path != null) {
      return path.resolve(getConfigFileName()).toFile();
    }
    return null;
  }

  private static Path getConfigDirectory() {
    Path resultPath = null;
    try {
      resultPath = Files.createDirectories(CONFIG_PATH);
    } catch (Exception exception) {
      Constants.LOG.error(
          "There was an error, creating the config directory {}:", CONFIG_PATH, exception);
    }
    return resultPath;
  }
}
