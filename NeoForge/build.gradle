plugins {
  id 'idea'
  id 'maven-publish'
  id 'net.neoforged.gradle.userdev' version '7.0.41'
  id 'java-library'
  id 'com.matthewprenger.cursegradle' version '1.4.0'
  id 'nu.studer.credentials' version '3.0'
  id "com.modrinth.minotaur" version "2.+"
  id 'com.github.johnrengelman.shadow' version '7.1.2'
}

base {
  archivesName = "${mod_id}-neoforge-${minecraft_version}"
}

// Automatically enable neoforge AccessTransformers if the file exists
// This location is hardcoded in FML and can not be changed.
// https://github.com/neoforged/FancyModLoader/blob/a952595eaaddd571fbc53f43847680b00894e0c1/loader/src/main/java/net/neoforged/fml/loading/moddiscovery/ModFile.java#L118
if (file('src/main/resources/META-INF/accesstransformer.cfg').exists()) {
  minecraft.accessTransformers.file file('src/main/resources/META-INF/accesstransformer.cfg')
}
runs {
  configureEach {
    modSource project.sourceSets.main
  }
  client {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
  }
  server {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    programArgument '--nogui'
  }

  gameTestServer {
    systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
  }

  data {
    programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

// Curse Maven Plugin
repositories {
  maven {
    url "https://www.cursemaven.com"
    content {
      includeGroup "curse.maven"
    }
  }
  mavenLocal()
}

configurations {
  shade
  implementation.extendsFrom shade
}

dependencies {
  implementation "net.neoforged:neoforge:${neoforge_version}"
  compileOnly project(":Common")

  // Extra libraries
  shade 'com.moandjiezana.toml:toml4j:0.7.2'
  shade 'com.github.zafarkhaja:java-semver:0.9.0'
}

// NeoGradle compiles the game, but we don't want to add our common code to the game's code
Spec<Task> notNeoTask = { Task it -> !it.name.startsWith("neo") } as Spec<Task>

tasks.withType(JavaCompile).matching(notNeoTask).configureEach {
  source(project(":Common").sourceSets.main.allSource)
}

tasks.withType(Javadoc).matching(notNeoTask).configureEach {
  source(project(":Common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
  from(project(":Common").sourceSets.main.allSource)
}

tasks.withType(ProcessResources).matching(notNeoTask).configureEach {
  from project(":Common").sourceSets.main.resources
}

jar {
  archiveClassifier = 'slim'
  manifest {
    attributes([
        "FMLModType"              : "LIBRARY",
        "Specification-Title"     : "${project.mod_name}",
        "Specification-Vendor"    : "${project.vendor_name}",
        "Specification-Version"   : "1",
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : "${project.version}",
        "Implementation-Vendor"   : "${project.mod_id}",
        "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
  }
  finalizedBy shadowJar
}

shadowJar {
  archiveClassifier = ''
  configurations = [project.configurations.shade]
  relocate 'com.moandjiezana.toml', "${project.group}.thirdparty.toml4j"
  relocate 'com.github.zafarkhaja', "${project.group}.thirdparty.semver"
  dependencies {
    include(dependency('com.moandjiezana.toml:toml4j:.*'))
    include(dependency('com.github.zafarkhaja:java-semver:.*'))
  }
  minimize()
}

assemble.dependsOn shadowJar

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId base.archivesName.get()
      from components.java
    }
  }
  repositories {
    maven {
      url "file://" + System.getenv("local_maven")
    }
  }
}

curseforge {
  apiKey = "${credentials.forKey('curseforge_api_token')}"
  project {
    id = "${curseforge_project_id}"
    changelog = file("../CHANGELOG.md")
    changelogType = 'markdown'
    releaseType = "${project.curseforge_release_type}"
    addGameVersion("${minecraft_version}")
    addGameVersion("NeoForge")
    mainArtifact shadowJar
  }
  options {
    forgeGradleIntegration = true
  }
}

modrinth {
  token = "${credentials.forKey('modrinth_api_token')}"
  projectId = "${modrinth_project_id}"
  versionNumber = "${version}"
  versionType = "${modrinth_release_type}"
  uploadFile = shadowJar
  gameVersions = ["${minecraft_version}"]
  loaders = ["neoforge"]
}
